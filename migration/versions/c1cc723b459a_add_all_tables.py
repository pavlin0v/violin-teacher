"""add all tables

Revision ID: c1cc723b459a
Revises: 927830b60cfa
Create Date: 2025-05-15 22:32:08.830481

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c1cc723b459a'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('name', sa.String(length=256), nullable=False),
    sa.Column('login', sa.String(length=64), nullable=False),
    sa.Column('hashed_password', sa.String(length=128), nullable=False),
    sa.Column('role', sa.Enum('USER', 'ADMIN', name='userrole'), nullable=False),
    sa.Column('last_login', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_users_login'), 'users', ['login'], unique=True)
    op.create_table('materials',
    sa.Column('material_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('title', sa.String(length=256), nullable=False),
    sa.Column('author_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('content_md', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users.user_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('material_id')
    )
    op.create_table('refresh_token',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('refresh_token', sa.String(length=512), nullable=False),
    sa.Column('used', sa.Boolean(), nullable=False),
    sa.Column('exp', sa.BigInteger(), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_refresh_token_refresh_token'), 'refresh_token', ['refresh_token'], unique=True)
    op.create_table('sheet_music',
    sa.Column('sheet_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('title', sa.String(length=256), nullable=False),
    sa.Column('composer', sa.String(length=256), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('owner_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.user_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('sheet_id')
    )
    op.create_table('user_metric_pref',
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('metric_pref', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('midi_files',
    sa.Column('midi_file_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('sheet_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('uploaded_by', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('filename', sa.String(length=256), nullable=False),
    sa.Column('status', sa.Enum('UPLOADED', 'PARSED', 'READY', 'ERROR', 'PENDING', name='filestatus'), nullable=False),
    sa.Column('version', sa.SmallInteger(), server_default=sa.text('0'), nullable=False),
    sa.Column('parsed_json', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['sheet_id'], ['sheet_music.sheet_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.user_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('midi_file_id')
    )
    op.create_table('practice_sessions',
    sa.Column('session_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('sheet_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('midi_file_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'PLAYING', 'DONE', 'ERROR', name='sessionstatus'), nullable=False),
    sa.Column('metric_pref', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('audio_url', sa.String(length=512), nullable=True),
    sa.Column('start_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('end_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['midi_file_id'], ['midi_files.midi_file_id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['sheet_id'], ['sheet_music.sheet_id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('session_id')
    )
    op.create_index('idx_session_user_status', 'practice_sessions', ['user_id', 'status'], unique=False)
    op.create_table('live_session_metrics',
    sa.Column('live_metric_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('session_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('offset_ms', sa.BigInteger(), nullable=False),
    sa.Column('matric_code', sa.String(length=32), nullable=False),
    sa.Column('value', sa.Numeric(precision=8, scale=4), nullable=False),
    sa.Column('score', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('window_ms', sa.SmallInteger(), nullable=False),
    sa.Column('algo_version', sa.SmallInteger(), server_default=sa.text('0'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['practice_sessions.session_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('live_metric_id')
    )
    op.create_table('reports',
    sa.Column('report_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('session_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('overall_score', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('summary', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('algo_version', sa.SmallInteger(), server_default=sa.text('0'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['practice_sessions.session_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('report_id')
    )
    op.create_index('idx_report_user_session', 'reports', ['user_id', 'session_id', 'created_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_report_user_session', table_name='reports')
    op.drop_table('reports')
    op.drop_table('live_session_metrics')
    op.drop_index('idx_session_user_status', table_name='practice_sessions')
    op.drop_table('practice_sessions')
    op.drop_table('midi_files')
    op.drop_table('user_metric_pref')
    op.drop_table('sheet_music')
    op.drop_index(op.f('ix_refresh_token_refresh_token'), table_name='refresh_token')
    op.drop_table('refresh_token')
    op.drop_table('materials')
    op.drop_index(op.f('ix_users_login'), table_name='users')
    op.drop_table('users')
    op.execute("DROP TYPE userrole")
    op.execute("DROP TYPE sessionstatus")
    op.execute("DROP TYPE filestatus")

    # ### end Alembic commands ###
